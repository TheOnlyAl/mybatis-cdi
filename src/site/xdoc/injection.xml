<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2013 the original author or authors.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!--  version: $Id$ -->

<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>MyBatis-CDI | Injecting MyBatis beans</title>
    <author email="mnesarco@gmail.com">Frank Martinez</author>
    <author email="eduardo.macarron@gmail.com">Eduardo Macarron</author>
  </properties>

  <body>
    <section name="Injecting MyBatis beans">
      
      <p>
        Create a singleton or application scoped bean with a <code>@Producer</code> annotated method that 
        provides an <code>SqlSessionFactory</code>: 
      </p>
      
        <source><![CDATA[
@ApplicationScoped
public class SqlSessionFactoryProvider {

  @Produces
  public SqlSessionFactory produceFactory() {
    String resource = "org/mybatis/example/mybatis-config.xml";
    InputStream inputStream = Resources.getResourceAsStream(resource);
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    return sqlSessionFactory;
  }

}]]></source>      
      
      <p>
        During the initialization process MyBatis-CDI will look for injection points annotated with <code>@Mapper</code>
        like the following:
      </p>
      
        <source><![CDATA[
public class FooServiceImpl implements FooService {

@Inject @Mapper private UserMapper userMapper;

public User doSomeStuff(String userId) {
  return this.userMapper.getUser(userId);
}]]></source>

      <p>
        Then it will get an instance (a proxy in fact) of that mapper from the <code>SqlSessionFactory</code> registered in 
        the CDI container and inject it into the bean. This proxy is a thread safe singleton so you should
        not worry about its scope. 
      </p>

      <p>
        Any configuration problem that may happen during the initialization process will make the module throw a 
        <code>MyBatisCdiConfiurationException</code>. In fact, given that there is not much to configure, this
        exception is only thrown when the <code>SqlSessionFactory</code> cannot be found.
      </p>
      
    <subsection name="Selecting the Factory">

      <p>
        MyBatis-CDI lets you have more than one <code>SqlSessionFactory</code> and you can choose the one you want to use
        in any injection point by using:
      </p>
      
      <ul>
        <li>One or more qualifiers</li>
        <li>The name of the <code>SqlSessionFactory</code></li>
        <li>Any paranoid combination of both</li>
      </ul>
      
      <p>
        If you have more than one <code>SqlSessionFactory</code>s you can differentiate them by adding qualifiers as you would
        do with any other CDI bean:
      </p>

        <source><![CDATA[
@ApplicationScoped  
@Produces
@OneQualifier
public SqlSessionFactory createManagerOne() throws IOException {
  ...
}
  
@ApplicationScoped
@Produces
@OtherQualifier
public SqlSessionFactory createManagerTwo() throws IOException {
  ...
}]]></source>
    
      <p>
        Now that there is no ambiguity you can select what factory you want to inject to a bean by adding the qualifiers to it:
      </p>
    
        <source><![CDATA[
@Inject @Mapper @OneQualifier private UserMapper userMapper;
]]></source>    
      
      <p>
        You can also give a name to your <code>SqlSessionFactory</code> and refer to it by its name in a injection point:
      </p>

        <source><![CDATA[
@ApplicationScoped
@Produces
@Named("fooManager")
public SqlSessionFactory createManager() throws IOException {
  ...
}
]]></source>
      
      <p>And inject it as follows:
      </p>
      
        <source><![CDATA[
@Inject @Mapper @Named("fooManager") private UserMapper userMapper;
]]></source>    
      
      </subsection>
      
    <subsection name="Injecting an SqlSession">

	  <p>You can inject an <code>SqlSession</code> by requesting its injection as follows:</p>
	  
        <source><![CDATA[
@Inject private SqlSession sqlSession;
]]></source>    

	  <p>The factory selection criteria we saw for mappers apply also to <code>SqlSession</code> injection.</p>
	  
      <p><span class="label important">NOTE</span>
        MyBatis-CDI controls the lifecycle of the injected <code>SqlSession</code> so you must not call any transactional method
        like <code>commit()</code> or <code>rollback()</code>, nor any lifecycle method like <code>close()</code>.
      </p>
	  
	</subsection>      
    </section>
  </body>
</document>
