<?xml version="1.0" encoding="UTF-8"?>
<!--

       Copyright 2013-2022 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          https://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>MyBatis-CDI | Injecting MyBatis beans</title>
    <author email="mnesarco@gmail.com">Frank Martinez</author>
    <author email="eduardo.macarron@gmail.com">Eduardo Macarron</author>
  </properties>

  <body>
    <section name="Injecting MyBatis beans">

      <p>
        This section will take you through de details of the discovery and injection process.
      </p>

    <subsection name="Producing a Factory">
      <p>
        The <code>SqlSessionFactory</code> is the source of any MyBatis bean so first you need to create one (at least)
        and let the container know about it existence. To do so, create a bean with producer method, and make sure
        that you add the <code>@ApplicationScoped</code> annotation to it because we just want to have one instance
        of the factory for the whole application.
      </p>
      <p>
        In order to let the container identify the producers to be used, you must annotate them with <code>@SessionFactoryProvider</code>.
      </p>

      <source><![CDATA[
public class MyProducers {

  @Produces
  @ApplicationScoped
  @SessionFactoryProvider
  public SqlSessionFactory produceFactory() {
    String resource = "org/mybatis/example/mybatis-config.xml";
    InputStream inputStream = Resources.getResourceAsStream(resource);
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    return sqlSessionFactory;
  }

}]]></source>

      <p><span class="label important">NOTE</span>
        If you forget the <code>@ApplicationScoped</code> the factory will be created on each injection, what implies
        parsing and loading the whole MyBatis xml file set. Your application will not fail but it will be terribly slow.
      </p>

      <p><span class="label important">NOTE</span>
        If you forget the <code>@SessionFactoryProvider</code> the factory will be ignored by mybatis-cdi.
      </p>

    </subsection>
    <subsection name="Disvovering and injecting Mappers">

      <p>
        There is nothing special more than injecting the mapper as any other CDI dependecy:
      </p>

        <source><![CDATA[
public class FooService {

  @Inject UserMapper userMapper;

  public User doSomeStuff(String userId) {
    return this.userMapper.getUser(userId);
  }

}
]]></source>

      <p>
        Then it will get an instance (a proxy in fact) of that mapper from the <code>SqlSessionFactory</code> registered in
        the CDI container and inject it into the bean. This proxy is not a normal mapper but a thread safe singleton
        so you should not worry about its scope.
      </p>

      <p>
        Any configuration problem that may happen during the initialization process will make the module throw a
        <code>MyBatisCdiConfiurationException</code>. Given that there is not much to configure, this
        exception is only thrown when the <code>SqlSessionFactory</code> cannot be found or is misconfigured.
      </p>

    </subsection>

    <subsection name="Resolving ambiguities">

      <p>
        In case you have more than one <code>SqlSessionFactory</code> you can choose the one you want to use
        in any injection point by using:
      </p>

      <ul>
        <li>One or more qualifiers (defined by you)</li>
        <li>The name of the <code>SqlSessionFactory</code> (qualified with <code>@Named</code>)</li>
        <li>Any paranoid combination of both</li>
      </ul>

      <p>
        Follows below an snippet that shows a producer that creates two <code>SqlSessionFactory</code>s. A qualifier is used
        to differentiate them as you would do with any other CDI bean:
      </p>

        <source><![CDATA[
@ApplicationScoped
@Produces
@FooQualifier
@SessionFactoryProvider
public SqlSessionFactory createManagerFoo() throws IOException {
  ...
}

@ApplicationScoped
@Produces
@BarQualifier
@SessionFactoryProvider
public SqlSessionFactory createManagerBar() throws IOException {
  ...
}]]></source>

      <p>
        Now that there is no ambiguity you can select what factory you want to inject by adding the qualifier to it:
      </p>

        <source><![CDATA[
@Inject @FooQualifier UserMapper userMapper;
]]></source>

      <p>
        You can also give a name to your <code>SqlSessionFactory</code>:
      </p>

        <source><![CDATA[
@ApplicationScoped
@Produces
@Named("fooManager")
@SessionFactoryProvider
public SqlSessionFactory createManager() throws IOException {
  ...
}]]></source>

      <p>
        And refer to it by its name in an injection point:
      </p>

        <source><![CDATA[
@Inject @Named("fooManager") UserMapper userMapper;
]]></source>

    </subsection>

    <subsection name="Injecting an SqlSession">

      <p>You can inject a thread safe <code>SqlSession</code> by requesting its injection as follows:</p>

        <source><![CDATA[
@Inject SqlSession sqlSession;
]]></source>

      <p>The factory selection criteria we saw for mappers apply also to <code>SqlSession</code> injection.</p>

      <p><span class="label important">NOTE</span>
        MyBatis-CDI controls the lifecycle of the injected <code>SqlSession</code> so you must not call any transactional method
        like <code>commit()</code> or <code>rollback()</code>, nor any lifecycle method like <code>close()</code>.
      </p>

    </subsection>
    </section>
  </body>
</document>
